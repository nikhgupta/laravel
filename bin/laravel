#!/usr/bin/env ruby
# encoding: UTF-8

# resolve bin path, ignoring symlinks
require "pathname"
bin_file = Pathname.new(__FILE__).realpath

# add 'lib' and 'bin' folders to the load path.
$:.unshift File.expand_path(File.join(%w[ .. .. lib]), bin_file)
$:.unshift File.expand_path(File.join(%w[ .. .. bin]), bin_file)

require "laravel" # which indirectly requires 'thor'

# require our commands
require "commands/new"
require "commands/config"

module Laravel
  # A means to create and manage applications based on the Laravel
  # framework for PHP. This has a neat command-subcommand structure
  # which imitates Git. This is run when we invoke Laravel over CLI.
  class CLI < Thor

    # choose a default task to run
    default_task :version

    # map some inputs to tasks
    map "-T" => "help", "-C" => "config"

    # config subcommand that manipulates app configuration
    #
    # +command+ :: subcommand to run.
    #
    desc "config [COMMAND]", "configure an existing application"
    subcommand "config", Laravel::Commands::Config

    # display version information for this gem but is a hidden task,
    # which means that it will not be shown in the 'help' overview.
    #
    # +version+ :: display current Laravel version, aliased as '-v'
    #
    desc "version", "displays usage information about this gem.", :hide => true
    method_option :version, :type => :boolean, :aliases => "-v"
    def version
      puts "Laravel v#{Laravel::VERSION}"
      # puts "Made possible by efforts of Laravel Community"
    end

    # run an artisan command using this gem
    #
    # +command+ :: command to run using artisan
    #
    method_option :app, :type => :string, :aliases => "-a",
      :desc => "use the specified Laravel application instead of curernt directory"
    method_option :debug, :type => :boolean
    desc "do [COMMAND]", "run an 'artisan' command"
    def do(*args)
      begin
        command = args.join ' '
        app = Laravel::App.new options[:app]
        app.artisan command
      rescue StandardError => e
        Laravel::handle_error e, options[:debug]
      end
    end

  end
end

Laravel::CLI.start # starts our CLI application
